# -*- coding: utf-8 -*-
"""CT-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hDW4P782MwnzC6toR3_su9L9owoN3enL

## ASHWIN SURESH (21MIS1174)

**Q3.**
# Preprocessing:

1. Identify the important features of the data set using correlation

2. Null value removals

3. List out the Mercedes Benz cars whose ratings is 3.5 and above

4. In which year most of Mercedes-Bez cars sold out

**Aim:**
The task is to unify the dataset by removing the null values and by normalizing the dataset. Later finding out which are the important columns and segregating them with the help of correlation matrix. Then we can find solution to years where most amount of cars were sold, and also sorting them as per rating.

**Procedure:**

1. Import necessary libraries
2. Load csv data into the dataframe
3. Identify columns with null values and then remove them
4. Feature Engineering ,i.e., standardizing the dataset to make sure there isn't starking difference between columns such as count and price, etc.
5. Label Encoding by making sure string columns have their say
6. Creation/Visualization of correlation matrix to make sure data can be plotted for further analysis in Linear Regression
7. Perform analysis as mentioned in aim.
"""

import pandas as pd

# Reading the csv file
data = pd.read_csv('/content/usa_mercedes_benz_prices.csv')

# First 5 records of the dataset
data.head()

# Description of the columns
data.info()

data['Name'].describe()

"""**1. Null Value column identification and removal**


---


"""

# Find columns with null values and print
null_columns = data.columns[data.isnull().any()].tolist()

print("Columns with null values:", null_columns)

# Remove rows with any null values
data.dropna(inplace=True)

# Description of the columns (all columns contain equivalent content/data)
data.info()

"""**2. Important features of dataset without null values**

---


"""

# Extract the year from the 'Name' column
data['Year'] = data['Name'].str[:4].astype(int)

# Extract numeric mileage from 'Mileage' column
data['Mileage'] = data['Mileage'].str.replace(',', '').str.rstrip(' mi.').astype(float)

# Extract numeric count from 'Review Count' column
data['Review Count'] = data['Review Count'].str.replace(',', '').astype(int)

# Extract price from 'Price' column
data['Price'] = data['Price'].str.replace('Not Priced', '0').str.replace(',', '').str.replace('$', '').astype(float)

data.info()

# To see the last 5 records
data.tail()

from sklearn.preprocessing import LabelEncoder, MinMaxScaler

# Label Encoding for 'Name' column
le = LabelEncoder()
data['Name_Encoded'] = le.fit_transform(data['Name'])

# Normalization using MinMaxScaler
scaler = MinMaxScaler()
numerical_features = ['Mileage', 'Rating', 'Review Count', 'Price', 'Year', 'Name_Encoded']
data[numerical_features] = scaler.fit_transform(data[numerical_features])

import seaborn as sns
import matplotlib.pyplot as plt

# Calculate the correlation matrix
selected_columns = ['Mileage', 'Rating', 'Review Count', 'Price', 'Year']
correlation_matrix = data[selected_columns].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

"""Eventhough on 'Name_Encoded' column pre-processing is applied still, we shouldn't consider that for linear regression as it just defines the product or as such the name. Whereas other columns show dependency like **Rating vs Review_Count** or **Year vs Price** etc. So important columns include (**Mileage, Rating, Review Count, Price, Year**)

**3. Mercedes-Benz Cars with Ratings 3.5 and above**

---
"""

# Extract 'Name' column
data['Name'] = data['Name'].str[5:]

# Filter the DataFrame to select cars with ratings 3.5 and above
filtered_cars = data[data['Rating'] >= 3.5]
print(filtered_cars[['Name', 'Rating']])

data.tail()

"""**4. Year in which most cars sold out**

---


"""

# Group the data by year and count the number of cars sold
cars_sold_by_year = data.groupby('Year')['Name'].count()

cars_sold_by_year

year_most_sold_count = cars_sold_by_year.max()
year_most_sold = cars_sold_by_year.idxmax()
print(f"The year with the most Mercedes-Benz cars sold is {year_most_sold} and the count is: {year_most_sold_count}")
