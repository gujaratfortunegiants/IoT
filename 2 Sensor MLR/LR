[{"id":"dht_sensor_flow","type":"tab","label":"Env Sensor Regression","disabled":false},{"id":"inject_read","type":"inject","z":"dht_sensor_flow","name":"Read every 2s","props":[],"repeat":"2","once":true,"onceDelay":0.1,"topic":"","x":100,"y":80,"wires":[[]]},{"id":"read_dht","type":"rpi-dht22","z":"dht_sensor_flow","name":"DHT11 Sensor","topic":"","dht":"11","pintype":"0","pin":"11","x":310,"y":80,"wires":[["store_temp_humidity"]]},{"id":"store_temp_humidity","type":"function","z":"dht_sensor_flow","name":"Store Temp & Humidity","func":"// Store temperature and humidity in flow context\nflow.set('temp', msg.payload.temperature);\nflow.set('humidity', msg.payload.humidity);\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":80,"wires":[["read_gas"]]},{"id":"read_gas","type":"rpi-gpio in","z":"dht_sensor_flow","name":"MQ-135 Analog","pin":"12","intype":"down","debounce":"25","read":true,"bcm":true,"x":330,"y":160,"wires":[["combine_data"]]},{"id":"combine_data","type":"function","z":"dht_sensor_flow","name":"Combine Sensor Data","func":"// Get temp and humidity from context\nvar temp = flow.get('temp') || 0;\nvar humidity = flow.get('humidity') || 0;\n\n// Structure the data\nmsg.payload = {\n    gas_level: msg.payload,\n    temperature: temp,\n    humidity: humidity,\n    time: new Date().getTime()\n};\n\n// Store last 10 readings in flow\nvar readings = flow.get('readings') || [];\nreadings.push(msg.payload);\nif (readings.length > 10) readings.shift();\nflow.set('readings', readings);\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":600,"y":160,"wires":[["debug_combined","regression"]]},{"id":"debug_combined","type":"debug","z":"dht_sensor_flow","name":"Raw Combined Data","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":880,"y":120,"wires":[]},{"id":"regression","type":"function","z":"dht_sensor_flow","name":"Multi-linear Regression","func":"const readings = flow.get('readings') || [];\nif (readings.length < 2) return null;\n\nlet sumX1 = 0, sumX2 = 0, sumY = 0;\nlet sumX1X1 = 0, sumX2X2 = 0, sumX1Y = 0, sumX2Y = 0;\n\nfor (let i = 0; i < readings.length; i++) {\n    const t = readings[i].temperature;\n    const h = readings[i].humidity;\n    const g = readings[i].gas_level;\n    sumX1 += t;\n    sumX2 += h;\n    sumY += g;\n    sumX1X1 += t * t;\n    sumX2X2 += h * h;\n    sumX1Y += t * g;\n    sumX2Y += h * g;\n}\n\n// Simple coefficients (not fully accurate multi-var regression)\nlet n = readings.length;\nlet a = ((sumX1Y * sumX2X2) - (sumX2Y * sumX1X1)) / ((sumX1X1 * sumX2X2) - (sumX1 * sumX2));\nlet b = ((sumX2Y * sumX1X1) - (sumX1Y * sumX2X2)) / ((sumX1X1 * sumX2X2) - (sumX1 * sumX2));\nlet c = (sumY - a * sumX1 - b * sumX2) / n;\n\nmsg.payload = `Estimated Gas = ${a.toFixed(2)} * Temp + ${b.toFixed(2)} * Humidity + ${c.toFixed(2)}`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":860,"y":200,"wires":[["debug_regression"]]},{"id":"debug_regression","type":"debug","z":"dht_sensor_flow","name":"Regression Equation","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1120,"y":200,"wires":[]}]
