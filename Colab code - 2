# -*- coding: utf-8 -*-
"""RPI Desc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q42LT11kJi2YsndEvCH0LLl6OCxXFGCp

### **ASHWIN SURESH (21MIS1174)**

**LAB 07-02-2025**

Performing Descriptive Analysis on IRIS dataset

## Statistic Measure

1. Import necessary libraries
"""

import pandas as pd
import numpy as np

"""2. Load the dataset"""

# Replace 'your_dataset.csv' with the actual file name
data = pd.read_csv('/content/Iris.csv')

"""3. Performing descriptive analysis"""

# Get summary statistics

# data = data.drop(columns=['Id'])

data.describe()

# Calculate specific statistics
print("Basic Statistics..")
print("Mean = ", data['SepalLengthCm'].mean())  # Calculate mean of a specific column
print("Standard Deviation = ", data['SepalLengthCm'].std())   # Calculate standard deviation
print("Median = ", data['SepalLengthCm'].median() )# Calculate median
print("Quantile = ", data['SepalLengthCm'].quantile([0.25, 0.75]))  # Calculate quartiles

# Min and Max
minimum = data.min()  # Get minimum values for all columns
maximum = data.max()  # Get maximum values for all columns
print("Minimum values:\n", minimum)
print("Maximum values:\n", maximum)

# Sorting
sorted_data = data.sort_values(by=['SepalLengthCm'])  # Sort by 'SepalLengthCm' column
print("Sorted data:\n", sorted_data)

# Finding maximum/minimum in a particular column
max_sepal_length = data['SepalLengthCm'].max()  # Maximum value in 'SepalLengthCm' column
min_sepal_length = data['SepalLengthCm'].min()  # Minimum value in 'SepalLengthCm' column
print("Maximum Sepal Length:", max_sepal_length)
print("Minimum Sepal Length:", min_sepal_length)

"""4. Outliers"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.boxplot(x=data['SepalLengthCm'])
plt.title('Box Plot of Sepal Length')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

sns.boxplot(x=data['PetalLengthCm'])
plt.title('Box Plot of Petal Length')
plt.show()

"""4. Explore data distribution"""

import matplotlib.pyplot as plt

X = data[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]  # Features
y = data['Species']  # Target variable

# Convert target variable to numerical labels if necessary
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming X and y are already defined as in your previous code

# Convert y back to a pandas Series
y = pd.Series(y, name='Species')  # Assuming 'Species' is the original column name

# Combine X and y into a single DataFrame
data_combined = pd.concat([X, y], axis=1)

# Calculate the correlation matrix
correlation_matrix = data_combined.corr()

import seaborn as sns

sns.heatmap(data_combined.corr(), annot=True, cmap='viridis')  # Display correlation matrix as heatmap
plt.title('Correlation Matrix Heatmap')
plt.show()

"""## Data Transformation"""

# Standardization

from sklearn.preprocessing import StandardScaler

# Assuming X is your feature matrix
scaler = StandardScaler()
X_standardized = scaler.fit_transform(X)
X_standardized_df = pd.DataFrame(X_standardized, columns=X.columns)
X_standardized_df.head()

# Normalization

from sklearn.preprocessing import MinMaxScaler

# Assuming X is your feature matrix
scaler = MinMaxScaler()
X_normalized = scaler.fit_transform(X)
X_normalized_df = pd.DataFrame(X_normalized, columns=X.columns)
X_normalized_df.head()

"""## Data Reduction and Export

Dimensionality Reduction to 2, i.e., all features are narrowed down to only 2 dimensions or features rather than originally being 'n'
"""

from sklearn.decomposition import PCA

# Assuming X is your feature matrix
pca = PCA(n_components=2)  # Reduce to 2 dimensions
X_reduced = pca.fit_transform(X)
X_reduced_df = pd.DataFrame(X_reduced, columns=['PC1', 'PC2'])
X_reduced_df.head()

"""Reduced Dimension exported to csv by incorporating column of Classification"""

import pandas as pd

# Create DataFrame with reduced data
df_reduced = pd.DataFrame(X_reduced, columns=['PC1', 'PC2'])

# Add target variable column
df_reduced['Species'] = le.inverse_transform(y)  # Assuming 'Species' is the name of your target variable column

# Export to CSV
df_reduced.to_csv('reduced_IRIS.csv', index=False)
